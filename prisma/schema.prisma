// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  PREMIUM
  ADMIN
  BANNED
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Simplified User model - references Stripe products directly
model User {
  id               String           @id @default(cuid())
  name             String?
  email            String           @unique
  emailVerified    DateTime?        @map("email_verified")
  image            String?
  role             UserRole         @default(USER)
  stripeProductId  String?          @map("stripe_product_id")
  membershipStatus MembershipStatus @default(ACTIVE) @map("membership_status")
  tokens           Int              @default(0)
  tokensExpiresAt  DateTime?        @map("tokens_expires_at")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  // Relations
  accounts       Account[]
  sessions       Session[]
  subscriptions  UserSubscription[]
  customer       StripeCustomer?
  stripeProduct  StripeProduct?     @relation(fields: [stripeProductId], references: [id])
  paymentHistory PaymentHistory[]
  blogPosts      BlogPost[]

  @@map("users")
}

// Stripe Products - Single source of truth for subscription tiers
model StripeProduct {
  id          String   @id // Stripe product ID
  name        String
  description String?
  active      Boolean  @default(true)
  metadata    Json? // Store tier info like features, displayName, sortOrder
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  prices         StripePrice[]
  users          User[]
  subscriptions  UserSubscription[]
  paymentHistory PaymentHistory[]

  @@map("stripe_products")
}

// Stripe Prices
model StripePrice {
  id              String   @id // Stripe price ID
  productId       String   @map("product_id")
  active          Boolean  @default(true)
  currency        String
  type            String // one_time, recurring
  unitAmount      Int?     @map("unit_amount") // Amount in cents
  interval        String? // month, year (for recurring)
  intervalCount   Int?     @map("interval_count")
  trialPeriodDays Int?     @map("trial_period_days")
  metadata        Json?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  product       StripeProduct      @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions UserSubscription[]

  @@map("stripe_prices")
}

// Stripe Customer
model StripeCustomer {
  id               String   @id @default(cuid())
  userId           String   @unique @map("user_id")
  stripeCustomerId String   @unique @map("stripe_customer_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptions UserSubscription[]

  @@map("stripe_customers")
}

// User Subscriptions - Simplified to reference products directly
model UserSubscription {
  id                   String    @id @default(cuid())
  userId               String    @map("user_id")
  stripeCustomerId     String    @map("stripe_customer_id")
  stripeSubscriptionId String    @unique @map("stripe_subscription_id")
  stripePriceId        String    @map("stripe_price_id")
  stripeProductId      String    @map("stripe_product_id")
  status               String // active, canceled, incomplete, past_due, etc.
  currentPeriodStart   DateTime  @map("current_period_start")
  currentPeriodEnd     DateTime  @map("current_period_end")
  cancelAtPeriodEnd    Boolean   @default(false) @map("cancel_at_period_end")
  canceledAt           DateTime? @map("canceled_at")
  trialStart           DateTime? @map("trial_start")
  trialEnd             DateTime? @map("trial_end")
  metadata             Json?
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomer StripeCustomer @relation(fields: [stripeCustomerId], references: [id], onDelete: Cascade)
  stripePrice    StripePrice    @relation(fields: [stripePriceId], references: [id], onDelete: Cascade)
  stripeProduct  StripeProduct  @relation(fields: [stripeProductId], references: [id], onDelete: Cascade)

  @@map("user_subscriptions")
}

// Payment History - Simplified
model PaymentHistory {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  stripePaymentIntentId String   @unique @map("stripe_payment_intent_id")
  amount                Int // Amount in cents
  currency              String
  status                String // succeeded, failed, pending, etc.
  stripeProductId       String?  @map("stripe_product_id")
  description           String?
  metadata              Json?
  createdAt             DateTime @default(now()) @map("created_at")

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeProduct StripeProduct? @relation(fields: [stripeProductId], references: [id])

  @@map("payment_history")
}

// Blog Posts - Generated content with token usage tracking
model BlogPost {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  title          String
  content        String   @db.Text
  originalText   String   @map("original_text") @db.Text
  imageUrl       String?  @map("image_url")
  imagePrompt    String?  @map("image_prompt") @db.Text
  tokensUsed     Int      @map("tokens_used") @default(1)
  characterCount Int      @map("character_count")
  slug           String?  @unique
  isPublished    Boolean  @default(false) @map("is_published")
  publishedAt    DateTime? @map("published_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("blog_posts")
}
